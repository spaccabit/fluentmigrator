<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ColumnNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The column's name cannot be null or an empty string.</value>
  </data>
  <data name="ColumnNamesMustBeUnique" xml:space="preserve">
    <value>Column names must be unique.</value>
  </data>
  <data name="ColumnTypeMustBeDefined" xml:space="preserve">
    <value>The column does not have a type defined.</value>
  </data>
  <data name="ConstraintMustHaveAtLeastOneColumn" xml:space="preserve">
    <value>The constraint must have at least one column specified.</value>
  </data>
  <data name="DefaultValueCannotBeNull" xml:space="preserve">
    <value>The default value cannot be null.</value>
  </data>
  <data name="DestinationSchemaCannotBeNull" xml:space="preserve">
    <value>The destination schema's name cannot be null or an empty string.</value>
  </data>
  <data name="ForeignKeyMustHaveOneOrMoreForeignColumns" xml:space="preserve">
    <value>The foreign key must have one or more foreign columns.</value>
  </data>
  <data name="ForeignKeyMustHaveOneOrMorePrimaryColumns" xml:space="preserve">
    <value>The foreign key must have one or more primary columns.</value>
  </data>
  <data name="ForeignKeyNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The foreign key's name cannot be null or an empty string.</value>
  </data>
  <data name="ForeignTableNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The foreign table name cannot be null or empty.</value>
  </data>
  <data name="IndexMustHaveOneOrMoreColumns" xml:space="preserve">
    <value>The index must have one or more columns.</value>
  </data>
  <data name="IndexNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The index's name cannot be null or an empty string.</value>
  </data>
  <data name="MethodXMustBeCalledOnObjectImplementingY" xml:space="preserve">
    <value>The {0} method must be called on an object that implements {1}.</value>
  </data>
  <data name="NewColumnNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The new column name cannot be null or empty.</value>
  </data>
  <data name="NewTableNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The new table name cannot be null or empty.</value>
  </data>
  <data name="OldColumnNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The old column name cannot be null or empty.</value>
  </data>
  <data name="OldTableNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The old table name cannot be null or empty.</value>
  </data>
  <data name="OperationCannotBeNull" xml:space="preserve">
    <value>The operation to be performed using the database connection cannot be null.</value>
  </data>
  <data name="PrimaryTableNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The primary table name cannot be null or empty.</value>
  </data>
  <data name="SchemaNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The schema's name cannot be null or an empty string.</value>
  </data>
  <data name="SequenceNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The sequence's name cannot be null or an empty string.</value>
  </data>
  <data name="SqlScriptCannotBeNullOrEmpty" xml:space="preserve">
    <value>The sql script cannot be null or an empty string.</value>
  </data>
  <data name="SqlStatementCannotBeNullOrEmpty" xml:space="preserve">
    <value>The sql statement cannot be null or an empty string.</value>
  </data>
  <data name="TableNameCannotBeNullOrEmpty" xml:space="preserve">
    <value>The table's name cannot be null or an empty string.</value>
  </data>
  <data name="UpdateDataExpressionMustNotSpecifyBothWhereClauseAndAllRows" xml:space="preserve">
    <value>Update statement specifies both a .Where() condition and that .AllRows() should be targeted. Specify one or the other, but not both.</value>
  </data>
  <data name="UpdateDataExpressionMustSpecifyWhereClauseOrAllRows" xml:space="preserve">
    <value>Update statement is missing a condition. Specify one by calling .Where() or target all rows by calling .AllRows().</value>
  </data>
</root>